import { CommonModule, isPlatformBrowser } from '@angular/common';
import {
  Component,
  Inject,
  OnDestroy,
  OnInit,
  PLATFORM_ID,
} from '@angular/core';
import {
  FormControl,
  FormGroup,
  ReactiveFormsModule,
  Validators,
  FormsModule,
} from '@angular/forms';
import { PostService } from '../services/post.service';
import { Post } from '../models/post';
import { ActivatedRoute, RouterLink, RouterModule } from '@angular/router';
import { NgxEditorComponent, NgxEditorMenuComponent, Editor } from 'ngx-editor';
import { AppServiceService } from '../services/app-service.service';

@Component({
  selector: 'app-create-post',
  standalone: true,
  imports: [
    CommonModule,
    FormsModule,
    ReactiveFormsModule,
    RouterModule,
    RouterLink,
    NgxEditorComponent,
    NgxEditorMenuComponent,
  ],
  templateUrl: './create-post.component.html',
  styleUrl: './create-post.component.css',
})
export class CreatePostComponent implements OnInit, OnDestroy {
  form!: FormGroup;
  blogId!: number;
  html = '';
  editor!: Editor;
  showSuccess = false;
  showError = false;

  constructor(
    @Inject(PLATFORM_ID) private platformId: Object,
    private postService: PostService,
    private route: ActivatedRoute,
    private appService: AppServiceService
  ) {}

  ngOnInit(): void {
    this.route.queryParams.subscribe((params) => {
      this.blogId = params['blogId'];
    });

    this.form = new FormGroup({
      title: new FormControl('', [Validators.required]),
      content: new FormControl('', [Validators.required]),
    });
    if (isPlatformBrowser(this.platformId)) {
      this.editor = new Editor();
    }
  }

  ngOnDestroy(): void {
    if (this.editor && isPlatformBrowser(this.platformId)) {
      // Ensure the editor is destroyed only in the browser environment
      this.editor.destroy();
    }
  }

  createPost(): void {
    if (this.form.invalid) {
      this.showError = true;
      this.showSuccess = false;
      return;
    }

    // Assuming these values are set correctly in the form or elsewhere
    // If you have a blogId, you can set it here or get it from the form
    const post: Post = new Post(
      0, // postId will be generated by the backend
      this.form.value.title,
      this.form.value.content,
      new Date(), // createdDate
      new Date(), // updatedDate
      this.blogId // blogId
    );

    this.postService.createPost(post).subscribe({
      next: (response) => {
        this.showSuccess = true;
        this.showError = false;
        this.form.reset();
      },
      error: (error) => {
        this.showSuccess = false;
        this.showError = true;
      },
    });
  }
}
